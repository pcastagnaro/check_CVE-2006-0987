import socket
import struct
import argparse
from colorama import init, Fore, Style

init(autoreset=True)  # Inicializa colorama

class DNSAmplificationScanner:
    def __init__(self, query_type):
        self.query_type = query_type
        self.query_types = {
            'A': b'\x01', 'NS': b'\x02', 'SOA': b'\x06', 'MX': b'\x0f',
            'TXT': b'\x10', 'AAAA': b'\x1c', 'RRSIG': b'\x2e', 'DNSKEY': b'\x30', 'ANY': b'\xff'
        }

    def create_dns_query(self, domain_name):
        transaction_id = struct.pack('!H', 0x098d)
        flags = struct.pack('!H', 0x0100)
        questions = struct.pack('!H', 0x0001)
        answer_rrs = struct.pack('!H', 0x0000)
        authority_rrs = struct.pack('!H', 0x0000)
        additional_rrs = struct.pack('!H', 0x0000)
        
        query = b''
        for part in domain_name.split('.'):
            query += struct.pack('B', len(part)) + part.encode()
        query += b'\x00'
        query += struct.pack('!H', 0x0001)
        query += struct.pack('!H', 0x0001)
        
        return transaction_id + flags + questions + answer_rrs + authority_rrs + additional_rrs + query

    def scan_host(self, ip, domain_name, port=53):
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        sock.settimeout(5)
        
        query = self.create_dns_query(domain_name)
        sock.sendto(query, (ip, port))
        
        try:
            response, _ = sock.recvfrom(4096)
            return len(response)
        except socket.timeout:
            return None
        finally:
            sock.close()

    def run_scan(self, target_ip, domain_name):
        send_size = len(self.create_dns_query(domain_name))
        recv_size = self.scan_host(target_ip, domain_name)
        
        if recv_size:
            amp_factor = recv_size / send_size
            print(f"{Fore.CYAN}Target: {target_ip}:{53}")
            print(f"{Fore.YELLOW}Response size: {recv_size} bytes")
            print(f"{Fore.MAGENTA}Amplification factor: {amp_factor:.2f}x")
            if amp_factor > 1:
                print(f"{Fore.RED}DNS server vulnerable to amplification detected!")
            else:
                print(f"{Fore.GREEN}DNS server not vulnerable to amplification.")
        else:
            print(f"{Fore.RED}No response received from {target_ip}:{53}")

def main():
    parser = argparse.ArgumentParser(description="DNS Amplification Scanner")
    parser.add_argument("target", help="IP address of the target")
    parser.add_argument("--domains", required=True, help="File containing list of domains to query")
    parser.add_argument("--type", default="ANY", choices=['A', 'NS', 'SOA', 'MX', 'TXT', 'AAAA', 'RRSIG', 'DNSKEY', 'ANY'], help="DNS query type")
    args = parser.parse_args()

    scanner = DNSAmplificationScanner(args.type)

    with open(args.domains, 'r') as domain_file:
        domains = [line.strip() for line in domain_file]

    print(f"{Fore.CYAN}Starting DNS Amplification Scan...")
    print(f"{Fore.YELLOW}Target: {args.target}")
    print(f"{Fore.YELLOW}Query Type: {args.type}")
    print(f"{Fore.YELLOW}Number of domains to test: {len(domains)}")

    for domain in domains:
        print(f"\n{Fore.CYAN}Testing domain: {domain}")
        scanner.run_scan(args.target, domain)

    print(f"\n{Fore.GREEN}Scan completed.")

if __name__ == "__main__":
    main()
